{% extends "commerce/_layouts/settingscp" %}
{% set title = "Product Types"|t %}

{% set crumbs = [
{ label: "Commerce Settings"|t, url: url('commerce/settings') },
{ label: "Product Types"|t, url: url('commerce/settings/producttypes') },
] %}


{% set selectedTab = 'settings' %}
{% import "_includes/forms" as forms %}

{% set content %}
<form method="post" accept-charset="UTF-8" data-saveshortcut>
    <input type="hidden" name="action" value="commerce/productType/saveProductType">
    <input type="hidden" name="redirect" value="commerce/settings/producttypes">

    {{ getCsrfInput() }}
    {% if productType.id %}<input type="hidden" name="productTypeId" value="{{ productType.id }}">{% endif %}

    {%  set variantTabHidden = (productType.hasVariants ? '' : 'hidden') %}
    {% set tabs = {
            0: {'label':'Settings','url':'#tab0'},
            'productTab': {'label':'Product Fields','url':'#productTab'},
            'variantTab': {'label':'Variant Fields','url':'#variantTab','class':'variant-settings '~variantTabHidden}
        }
    %}

    <div id="tab0">
    {{ forms.textField({
        first: true,
        label: "Name"|t,
        instructions: "What this product type will be called in the CP."|t,
        id: 'name',
        name: 'name',
        value: productType.name,
        errors: productType.getErrors('name'),
        autofocus: true,
        required: true,
        translatable: true
    }) }}

    {{ forms.textField({
        label: "Handle"|t,
        instructions: "How you’ll refer to this product type in the templates."|t,
        id: 'handle',
        class: 'code',
        name: 'handle',
        value: productType.handle,
        errors: productType.getErrors('handle'),
        required: true
    }) }}

    {{ forms.checkboxField({
        label: "Does this product type have dimensions?"|t,
        id: 'hasDimensions',
        name: 'hasDimensions',
        checked: productType.hasDimensions,
    }) }}

    {% macro hasVariantsField(productType) %}
        {% from "_includes/forms" import checkboxField %}

        {{ checkboxField({
            label: "Does this product type have variants?"|t,
            id: 'hasVariants',
            name: 'hasVariants',
            checked: productType.hasVariants,
            toggle: '.variant-settings'
        }) }}
    {% endmacro %}

    {% macro hasUrlsField(productType) %}
        {% from "_includes/forms" import checkboxField %}

        {{ checkboxField({
            label: "Products of this type have their own URLs"|t,
            id: 'hasUrls',
            name: 'hasUrls',
            checked: productType.hasUrls,
            toggle: 'url-settings'
        }) }}
    {% endmacro %}


    {% macro templateField(productType) %}
        {% from "_includes/forms" import textField %}

        {{ textField({
            label: "Product Template"|t,
            instructions: "The template to use when a product’s URL is requested."|t,
            id: 'template',
            class: 'ltr',
            name: 'template',
            value: productType.template,
            errors: productType.getErrors('template')
        }) }}
    {% endmacro %}


    {% macro fieldOptionsRow(name, handle) %}
        {% from "_includes/forms" import checkboxField %}
        <tr data-id="1" data-name="{{ handle }}Field">
            <th scope="row" data-title="Name">
                {{ name|title }}
            </th>
            <td data-title="Visible">
                {{ checkboxField({
                    label: ""|t,
                    id: 'visible',
                    name: 'fieldOptions['~handle~'][visible]',
                    checked: 1,
                    disabled:lockedVisible|default(false)
                }) }}
            </td>
            <td data-title="Same">
                <span class="variant-settings">
                {{ checkboxField({
                    label: ""|t,
                    id: 'same',
                    name: 'fieldOptions['~handle~'][same]',
                    checked: 1
                }) }}
                </span>
            </td>
        </tr>
    {%  endmacro %}

    {% macro titleFormatField(productType) %}
        {% from "_includes/forms" import textField %}
        <div class="variant-settings {{ (productType.hasVariants ? '' : 'hidden') }}">
        {{ textField({
            label: "Variant Title Format"|t,
            instructions: "What the auto-generated entry titles should look like. You can include tags that output entry properties, such as {ex1} or {ex2}."|t({ ex1: '<code>{sku}</code>', ex2: '<code>{myCustomField}</code>' }),
            id: 'titleFormat',
            class: 'ltr',
            name: 'titleFormat',
            value: productType.titleFormat,
            errors: productType.getErrors('titleFormat')
        }) }}
        </div>
    {% endmacro %}


    {% from _self import hasUrlsField, templateField, hasVariantsField, fieldOptionsRow, titleFormatField  %}

    <hr/>
    {{ hasVariantsField(productType) }}
    {{ titleFormatField(productType) }}
    <hr/>

    {{ hasUrlsField(productType) }}


    <div id="url-settings" class="nested-fields{% if not productType.hasUrls %} hidden{% endif %}">

        {% macro urlFormatText(locale, productType, name, value) %}
            {% from "_includes/forms" import text, errorList %}
            {% set errors = productType.getErrors(name~'-'~locale.id) %}

            <div class="input{% if errors %} errors{% endif %}">
                {{ text({
                    id: name~'-'~locale.id,
                    class: 'code ltr',
                    name: name~'['~locale.id~']',
                    value: (value != '__home__' ? value : null),
                    errors: errors
                }) }}
            </div>

            {{ errorList(errors) }}
        {% endmacro %}

        {% set urlFormatInput %}
            <table class="data fullwidth">
                <thead>
                {% if craft.isLocalized() %}
                    <th></th>
                {% endif %}
                <th scope="col">{{ "Product Type"|t }}</th>
                </thead>
                <tbody>
                {% for locale in craft.i18n.getSiteLocales() %}
                    <tr>
                        {% if craft.isLocalized() %}
                            <th class="thin nowrap">{{ locale.id }}</th>
                        {% endif %}
                        <td class="topalign">
                            {% set value = (productType.locales[locale.id] is defined ? productType.locales[locale.id].urlFormat : null) %}
                            {{ _self.urlFormatText(locale, productType, 'urlFormat', value) }}
                        </td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        {% endset %}

        {{ forms.field({
            label: "Product URL Format"|t,
            instructions: "What the product URLs should look like. You can include tags that output entry properties, such as such as {ex1} or {ex2}."|t({ ex1: '<code>{slug}</code>', ex2: '<code>{publishDate|date(\"Y\")}</code>' }),
        }, urlFormatInput) }}

        {{ forms.textField({
            label: "Product Type Template"|t,
            instructions: "The template to use when a product’s URL is requested."|t,
            id: 'template',
            class: 'ltr',
            name: 'template',
            value: productType.template,
            errors: productType.getErrors('template')
        }) }}
    </div>

    </div>

    <div id="productTab" class="hidden">

    {% include "_includes/fieldlayoutdesigner" with {
    fieldLayout: productType.asa('productFieldLayout').getFieldLayout(),
    } only %}

    </div>

    <div id="variantTab" class="hidden">

    {% namespace "variant-layout" %}
    {% include "_includes/fieldlayoutdesigner" with {
        fieldLayout: productType.asa('variantFieldLayout').getFieldLayout(),
        customizableTabs: false
    } only %}
    {% endnamespace %}

    </div>

    <hr>

    <div class="buttons">
        <input type="submit" class="btn submit" value="{{ 'Save'|t }}">
    </div>
</form>

{% endset %}

{% set js %}
{% if not productType.handle %}new Craft.HandleGenerator('#name', '#handle');{% endif %}
$(function () {
    $('#type').selectize({
        dropdownParent: 'body'
    });
});
{% endset %}
{% includeJs js %}

{% if not productType.handle %}
    {% set js %}

        {% for locale in craft.i18n.getSiteLocales() %}
            {% if productType.locales[locale.id] is not defined or not productType.locales[locale.id].urlFormat %}
                new Craft.EntryUrlFormatGenerator('#name', '#urlFormat-{{ locale.id }}', { suffix: '/{slug}' });
            {% endif %}
        {% endfor %}
    {% endset %}
    {% includeJs js %}
{% endif %}
